final_model %>%
collect_metrics()
final_model %>%
collect_predictions()
# Obtener los valores verdaderos y predichos
predictions <- final_model %>%
collect_predictions()
# Crear el gráfico de valores reales vs. valores predichos
ggplot(predictions, aes(x = PT08.S5.O3., y = .pred)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos azules para las observaciones
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Línea de igualdad
labs(
title = "Predicted vs Real Values of PT08.S5(O3)",
x = "Real Values (PT08.S5(O3))",
y = "Predicted Values"
) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate) # Librería para trabajar con fechas
library(RSocrata) # Librería para acceder a datos desde Socrata Open Data API
library(tidymodels)
# Calculamos la fecha exacta de hace 2 años desde el día de hoy
years_ago <- today() - years(2)
# Construimos la URL para acceder a los datos de accidentes de tráfico en Chicago
# Usamos glue para insertar la fecha calculada como filtro en la URL y obtener solo datos de los últimos dos años
crash_url <- glue::glue("https://data.cityofchicago.org/Transportation/Traffic-Crashes-Crashes/85ca-t3if?$where=CRASH_DATE > '{years_ago}'")
# Leemos los datos desde la URL usando read.socrata y los convertimos en un tibble para facilitar su manipulación en R
crash_raw <- as_tibble(read.socrata(crash_url))
crash <- crash_raw %>%
arrange(desc(crash_date)) %>% # Ordenamos los registros en orden descendente
transmute( # Seleccionamos y transformamos variables con 'transmute'
injuries = if_else(injuries_total > 0, "injuries", "none"), # Creamos v 'injuries' q indica si hubo  lesiones
crash_date,     # Conservamos la fecha y hora del accidente
crash_hour,
report_type = if_else(report_type == "", "UNKNOWN", report_type), # Establecemos "UNKNOWN" si 'report_type' está vacío
num_units,  # Seleccionamos varias variables relevantes para el análisis
posted_speed_limit,
weather_condition,
lighting_condition,
roadway_surface_cond,
first_crash_type,
trafficway_type,
prim_contributory_cause,
latitude, longitude
) %>%
na.omit() # Eliminamos las filas con valores NA
crash
set.seed(123)
crash_split <- initial_split(crash, strata = injuries, prop=0.75)
crash_train <- training(crash_split)
crash_test <- testing(crash_split)
library(themis)
# Creamos una receta para el modelo con la variable de respuesta 'injuries' y el resto de variables predictoras en 'crash_train'
crash_rec <- recipe(injuries ~ ., data = crash_train) %>%
# Convertimos 'injuries' a un factor
step_mutate(injuries = as.factor(injuries)) %>%
# Extraemos componentes de fecha a partir de 'crash_date' para convertirla en variables como año, mes, día, etc.
step_date(crash_date) %>%
# Eliminamos la columna original 'crash_date' después de extraer sus componentes de fecha
step_rm(crash_date) %>%
# Agrupamos niveles menos frecuentes de variables categóricas bajo una nueva categoría llamada "OTHER"
step_other(
weather_condition,          # Condición del clima en el momento del accidente
first_crash_type,           # Tipo inicial del accidente
trafficway_type,            # Tipo de vía donde ocurrió el accidente
prim_contributory_cause,    # Causa primaria que contribuyó al accidente
other = "OTHER"             # Nombre de la categoría "otros" para agrupar niveles raros
) %>%
# Realizamos downsampling en la variable de respuesta 'injuries' para equilibrar las clases en caso de desbalance
step_downsample(injuries)
crash_rec
tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
crash_wf <- workflow() %>%
add_recipe(crash_rec) %>%
add_model(tree_spec)
crash_wf
crash_train$injuries <- as.factor(crash_train$injuries)
crash_test$injuries <- as.factor(crash_test$injuries)
set.seed(123)
tree_fit <- tree_spec %>%
fit(injuries ~ ., data = crash_train)
#imprimo el modelo
tree_fit
results <- crash_train %>%
bind_cols(predict(tree_fit, crash_train) %>%
rename(.pred_tree = .pred_class))
#veamos nuestra nueva tabla
head(results)
metrics(results, truth = injuries, estimate = .pred_tree)
# Genera predicciones con probabilidades y clases
results_test <- predict(tree_fit, new_data = crash_test, type = "prob") %>%
bind_cols(predict(tree_fit, new_data = crash_test, type = "class") %>%
rename(.pred_tree = .pred_class)) %>%
bind_cols(crash_test)
head(results_test)
# Definimos las métricas que queremos: accuracy y AUC
selected_metrics <- metric_set(accuracy, sensitivity, specificity, f_meas)
selected_metrics(results_test, truth = injuries, estimate = .pred_tree)
# Calcular la matriz de confusión
library(yardstick)
conf_matrix <- conf_mat(data = results_test,
truth = injuries,
estimate = .pred_tree)
# Mostrar la matriz de confusión
print(conf_matrix)
crash_fit <- last_fit(crash_wf, crash_split)
collect_predictions(crash_fit) %>%
roc_curve(injuries, .pred_injuries) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_line(size = 1.5, color = "midnightblue") +
geom_abline(lty = 2, alpha = 0.5, color = "gray50", size = 1.2) +
coord_equal()
collect_predictions(crash_fit) %>%
roc_curve(injuries, .pred_injuries) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_line(size = 1.5, color = "midnightblue") +
geom_abline(lty = 2, alpha = 0.5, color = "gray50", size = 1.2) +
coord_equal()
library(tidyverse)
library(lubridate) # Librería para trabajar con fechas
library(RSocrata) # Librería para acceder a datos desde Socrata Open Data API
library(tidymodels)
# Calculamos la fecha exacta de hace 2 años desde el día de hoy
years_ago <- today() - years(2)
# Construimos la URL para acceder a los datos de accidentes de tráfico en Chicago
# Usamos glue para insertar la fecha calculada como filtro en la URL y obtener solo datos de los últimos dos años
crash_url <- glue::glue("https://data.cityofchicago.org/Transportation/Traffic-Crashes-Crashes/85ca-t3if?$where=CRASH_DATE > '{years_ago}'")
# Leemos los datos desde la URL usando read.socrata y los convertimos en un tibble para facilitar su manipulación en R
crash_raw <- as_tibble(read.socrata(crash_url))
crash <- crash_raw %>%
arrange(desc(crash_date)) %>% # Ordenamos los registros en orden descendente
transmute( # Seleccionamos y transformamos variables con 'transmute'
injuries = if_else(injuries_total > 0, "injuries", "none"), # Creamos v 'injuries' q indica si hubo  lesiones
crash_date,     # Conservamos la fecha y hora del accidente
crash_hour,
report_type = if_else(report_type == "", "UNKNOWN", report_type), # Establecemos "UNKNOWN" si 'report_type' está vacío
num_units,  # Seleccionamos varias variables relevantes para el análisis
posted_speed_limit,
weather_condition,
lighting_condition,
roadway_surface_cond,
first_crash_type,
trafficway_type,
prim_contributory_cause,
latitude, longitude
) %>%
na.omit() # Eliminamos las filas con valores NA
crash
View(crash_raw)
View(crash)
set.seed(123)
crash_split <- initial_split(crash, strata = injuries, prop=0.75)
crash_train <- training(crash_split)
crash_test <- testing(crash_split)
library(themis)
# Creamos una receta para el modelo con la variable de respuesta 'injuries' y el resto de variables predictoras en 'crash_train'
crash_rec <- recipe(injuries ~ ., data = crash_train) %>%
# Convertimos 'injuries' a un factor
step_mutate(injuries = as.factor(injuries)) %>%
# Extraemos componentes de fecha a partir de 'crash_date' para convertirla en variables como año, mes, día, etc.
step_date(crash_date) %>%
# Eliminamos la columna original 'crash_date' después de extraer sus componentes de fecha
step_rm(crash_date) %>%
# Agrupamos niveles menos frecuentes de variables categóricas bajo una nueva categoría llamada "OTHER"
step_other(
weather_condition,          # Condición del clima en el momento del accidente
first_crash_type,           # Tipo inicial del accidente
trafficway_type,            # Tipo de vía donde ocurrió el accidente
prim_contributory_cause,    # Causa primaria que contribuyó al accidente
other = "OTHER"             # Nombre de la categoría "otros" para agrupar niveles raros
) %>%
# Realizamos downsampling en la variable de respuesta 'injuries' para equilibrar las clases en caso de desbalance
step_downsample(injuries)
View(crash_train)
View(crash_rec)
tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
crash_wf <- workflow() %>%
add_recipe(crash_rec) %>%
add_model(tree_spec)
crash_wf
crash_train$injuries <- as.factor(crash_train$injuries)
crash_test$injuries <- as.factor(crash_test$injuries)
set.seed(123)
tree_fit <- tree_spec %>%
fit(injuries ~ ., data = crash_train)
#imprimo el modelo
tree_fit
results <- crash_train %>%
bind_cols(predict(tree_fit, crash_train) %>%
rename(.pred_tree = .pred_class))
#veamos nuestra nueva tabla
head(results)
metrics(results, truth = injuries, estimate = .pred_tree)
# Genera predicciones con probabilidades y clases
results_test <- predict(tree_fit, new_data = crash_test, type = "prob") %>%
bind_cols(predict(tree_fit, new_data = crash_test, type = "class") %>%
rename(.pred_tree = .pred_class)) %>%
bind_cols(crash_test)
View(results_test)
head(results_test)
# Definimos las métricas que queremos: accuracy y AUC
selected_metrics <- metric_set(accuracy, sensitivity, specificity, f_meas)
selected_metrics(results_test, truth = injuries, estimate = .pred_tree)
# Calcular la matriz de confusión
library(yardstick)
conf_matrix <- conf_mat(data = results_test,
truth = injuries,
estimate = .pred_tree)
# Mostrar la matriz de confusión
print(conf_matrix)
crash_fit <- last_fit(crash_wf, crash_split)
collect_predictions(crash_fit) %>%
roc_curve(injuries, .pred_injuries) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_line(size = 1.5, color = "midnightblue") +
geom_abline(lty = 2, alpha = 0.5, color = "gray50", size = 1.2) +
coord_equal()
collect_predictions(crash_fit) %>%
roc_curve(injuries, .pred_injuries) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_line(size = 1.5, color = "midnightblue") +
geom_abline(lty = 2, alpha = 0.5, color = "gray50", size = 1.2) +
coord_equal()
as.Date("2025-01-20")+days(60)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(stringr)
library(readr)
library(tidyverse)
html_discurso <- read_html("https://www.lamoncloa.gob.es/presidente/intervenciones/Paginas/2023/prsp15112023.aspx" , encoding = "UTF-8")
print(html_discurso)
discurso <- html_discurso %>%
html_element("p.Justificado")
print(discurso)
texto_plano <- discurso %>%
html_text2()
?html_text2
print(texto_plano)
# html_discurso <- read_html("link.com")
discurso <- html_discurso %>%
html_elements("p.Justificado") %>%
html_text2()
print(discurso)
pagina_entera <- read_html("https://www.gob.mx/presidencia/articulos/version-estenografica-toma-de-protesta-de-claudia-sheinbaum-como-presidenta-constitucional-de-los-estados-unidos-mexicanos")
pagina_entera <- read_html("https://www.gob.mx/presidencia/articulos/version-estenografica-toma-de-protesta-de-claudia-sheinbaum-como-presidenta-constitucional-de-los-estados-unidos-mexicanos")
elemento_titulo <- pagina_entera %>%
html_element("h1") %>%
html_text()
elemento_titulo
elemento_subtitulo <- pagina_entera %>%
html_element("h2") %>%
html_text()
elemento_subtitulo
extraer_texto
descarga <- read_html("https://www.anagrama-ed.es/libro/panorama-de-narrativas/albertine-desaparecida/9788433931320/PN_132")
titulo <- descarga %>%
html_element("h1.titulo-libro") %>%
html_text2()
print(titulo)
titulo <- descarga %>%
html_element("h1.text-4xl font-bold text-pretty italic 2xl:text-5xl") %>%
html_text2()
titulo <- descarga %>%
html_element("h1.text-4xl font-bold text-pretty italic 2xl:text-5xl") %>%
html_text2()
titulo <- descarga %>%
html_element("h1.text-4xl") %>%
html_text2()
print(titulo)
biografia <- descarga %>%
html_element("div.textContent") %>%
html_text2()
print(biografia)
biografia_2 <- descarga %>%
html_elements("p") %>%
html_text2()
print(biografia_2)
biografia <- descarga %>%
html_element("div.prose") %>%
html_text2()
biografia <- descarga %>%
html_element("#col_right") %>%
html_element("prose") %>%
html_text2()
biografia <- descarga %>%
html_element("#col_right") %>%
html_element("div.prose") %>%
html_text2()
biografia <- descarga %>%
html_element("div.prose") %>%
html_text2()
biografia
View(pagina_entera)
knitr::opts_chunk$set(echo = TRUE)
descarga <- read_html("https://www.anagrama-ed.es/libro/panorama-de-narrativas/albertine-desaparecida/9788433931320/PN_132")
descarga <- read_html("https://www.anagrama-ed.es/libro/panorama-de-narrativas/albertine-desaparecida/9788433931320/PN_132")
library(rvest)
library(stringr)
library(readr)
library(tidyverse)
descarga <- read_html("https://www.anagrama-ed.es/libro/panorama-de-narrativas/albertine-desaparecida/9788433931320/PN_132")
autor <- descarga %>%
html_element("#col_right") %>%
html_element("p") %>%
html_text2()
autor
autor <- descarga %>%
html_element("div.prose") %>%
html_element("p") %>%
html_text2()
autor <- descarga %>%
html_element("div.text-xl")
autor <- descarga %>%
html_element("div.text-xl") %>%
html_element("p") %>%
html_text2()
autor <- descarga %>%
html_element("div.text-xl") %>%
html_text2()
autor <- descarga %>%
html_element("div.flex") %>%
html_element("div.text-xl") %>%
html_text2()
autor <- descarga %>%
#html_element("div.flex") %>%
html_element("div.text-xl") %>%
html_text2()
autor <- descarga %>%
html_element("section.container") %>%
html_element("div.text-xl") %>%
html_text2()
tabla_info_2 <- descarga %>%
html_element("#tab-content-info") %>%
html_table()
tabla_info <- descarga %>%
html_element("div.grid") %>%
html_table()
descarga %>%
html_element("div.grid")
descarga %>%
html_element("div.hidden") %>%
html_element("div.grid")
tabla_info <- descarga %>%
html_element("div.grid")
View(tabla_info)
View(tabla_info)
xml_child(tabla_info, 2)
xml_child(tabla_info, 1)
tabla_info <- descarga %>%
html_element("div.hidden.lg:block") %>%
html_element("div.grid") %>%
html_table()
tabla_info <- descarga %>%
html_element("div.hidden") %>%
html_element("div.grid") %>%
html_table()
descarga %>%
html_element("div.hidden") %>%
html_element("div.grid")
tabla_info <- descarga %>%
html_element("div.grid") %>%
html_text2()
tabla_info
tabla_info <- descarga %>%
html_element("div.grid") %>%
html_element("div.hidden") %>%
html_text2()
descarga %>%
html_element("div.grid") %>%
html_element("div.hidden")
tabla_info <- descarga %>%
html_element("div.grid.flex-wrap")
descarga %>%
html_element("div.grid.flex-wrap")
tabla_info <- descarga %>%
html_element("div.grid.flex-wrap") %>%
#html_element("div.hidden") %>%
html_text2()
tabla_info
tabla_info_2 <- descarga %>%
html_element("#tab-content-info")
tabla_info_2
lineas <- unlist(strsplit(texto, "\n"))
lineas <- unlist(strsplit(tabla_info, "\n"))
lineas
claves <- lineas[seq(1, length(lineas), by = 2)]
valores <- lineas[seq(2, length(lineas), by = 2)]
claves
valores
tabla <- data.frame(Clave = claves, Valor = valores, stringsAsFactors = FALSE)
View(tabla)
descarga <- read_html("https://www.anagrama-ed.es/libro/panorama-de-narrativas/albertine-desaparecida/9788433931320/PN_132")
titulo <- descarga %>%
html_element("h1.text-4xl") %>%
html_text2()
View(tabla)
tabla_p <- pivot_wider(tabla, names_from= Clave, values_from = Valor)
View(tabla_p)
tabla_libro <- function(link){
descarga <- read_html(link)
titulo <- descarga %>%
html_element("h1.text-4xl") %>%
html_text2()
biografia <- descarga %>%
html_element("div.prose") %>%
#html_element("div.textContent") %>%
html_text2()
autor <- descarga %>%
html_element("section.container") %>%
html_element("div.text-xl") %>%
html_text2()
tabla_info <- descarga %>%
html_element("div.grid.flex-wrap") %>%
#html_element("div.hidden") %>%
html_text2()
lineas <- unlist(strsplit(tabla_info, "\n"))
claves <- lineas[seq(1, length(lineas), by = 2)]
valores <- lineas[seq(2, length(lineas), by = 2)]
tabla <- data.frame(Clave = claves, Valor = valores, stringsAsFactors = FALSE)
tabla_p <- pivot_wider(tabla, names_from= Clave, values_from = Valor)
tabla_final <- as.data.frame(cbind("Autor" = autor,"Biografia"=biografia,
"Titulo" = titulo, tabla_p))
return(tabla_final)
}
link <- "https://www.anagrama-ed.es/libro/panorama-de-narrativas/tierra-de-empusas/9788433929716/PN_1142"
libro_nuevo <- tabla_libro(link = link)
View(libro_nuevo)
link <- "https://www.anagrama-ed.es/libro/compendium/cuentos/9788433924216/CP_7"
resultado <- tabla_libro(link)
print(resultado)
View(resultado)
links <- c()
pagina <- read_html("https://www.anagrama-ed.es/autor/almodovar-pedro-38")
libros <- pagina %>%
html_elements("div.libro-vertical__portada") %>%
html_elements("a") %>%
html_attr("href")
print(libros)
libros <- pagina %>%
html_elements("div.w-1/2") %>%
html_elements("a") %>%
html_attr("href")
libros <- pagina %>%
html_elements("div.w") %>%
html_elements("a") %>%
html_attr("href")
print(libros)
pagina %>%
html_elements("div.w")
pagina %>%
html_elements("div.overflow")
pagina %>%
html_elements("div.overflow-x-hidden")
libros <- pagina %>%
html_elements("div.overflow-x-hidden") %>%
html_elements("a") %>%
html_attr("href")
print(libros)
raiz <- "https://www.anagrama-ed.es"
libros_link <- str_c(raiz, libros)
for (i in libros_link){
print(i)
}
tabla_libro(libros_link[1])
View(resultado)
books <- tibble(
Autor=character(),
Biografia=character(),
Titulo = character(),
ISBN=character(),
EAN=character(),
"PVP CON IVA"= character(),
"NÚM. DE PÁGINAS"=character(),
CÓDIGO=character(),
PUBLICACIÓN = character()
)
for(i in libros_link){
resultado <- tabla_libro(i)
books <- books %>%
bind_rows(resultado)
}
View(books)
biografia <- descarga %>%
html_element("div.prose") %>%
html_text2()
print(biografia)
biografia_2 <- descarga %>%
html_elements("p") %>%
html_text2()
print(biografia_2)
print(biografia)
print(biografia_2)
biografia <- descarga %>%
html_element("#col_right") %>%
html_element("div.prose") %>%
html_text2()
biografia
autor <- descarga %>%
html_element("section.container") %>%
html_element("div.text-xl") %>%
html_text2()
autor
tabla_info <- descarga %>%
html_element("div.grid.flex-wrap") %>%
#html_element("div.hidden") %>%
html_text2()
tabla_info
